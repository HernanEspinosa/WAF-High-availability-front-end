global
	log /dev/log	local0
	log /dev/log	local1 notice
	chroot /var/lib/haproxy
	stats socket /run/haproxy/admin.sock mode 660 level admin expose-fd listeners
	stats timeout 30s
	user haproxy
	group haproxy
	daemon

defaults
        log     global
        mode    http
        option  httplog
    	# HTTP CHECK
    	option httpchk HEAD / HTTP/1.0
        option  dontlognull
        timeout connect 5000
        timeout client  50000
        timeout server  50000
		errorfile 400 /etc/haproxy/errors/400.http
		errorfile 403 /etc/haproxy/errors/403.http
		errorfile 408 /etc/haproxy/errors/408.http
		errorfile 500 /etc/haproxy/errors/500.http
		errorfile 502 /etc/haproxy/errors/502.http
		errorfile 503 /etc/haproxy/errors/503.http
		errorfile 504 /etc/haproxy/errors/504.http
       
listen stats
        bind 0.0.0.0:8090
        mode http
        stats enable
        stats refresh 10s
        stats show-node
        stats auth haproxy:passw0rd
        stats uri /haproxy/stats

frontend http-in
        bind *:8080
        # ACL function declarations
    	acl is_abuse src_http_req_rate(Abuse) ge 10
    	acl inc_abuse_cnt src_inc_gpc0(Abuse) gt 0
    	acl abuse_cnt src_get_gpc0(Abuse) gt 0
    	# Rules
    	tcp-request connection track-sc0 src table Abuse
    	tcp-request connection reject if abuse_cnt
    	http-request deny if abuse_cnt
    	http-request deny if is_abuse inc_abuse_cnt
    	use_backend backendservers

backend Abuse
    	# What does is keep track of whether an IP is abusive as well as its current request rate.
		stick-table type ip size 100K expire 30m store gpc0,http_req_rate(10s)

backend backendservers
        balance roundrobin
        option  log-health-checks
        server  WAF_backendserver1 172.34.1.4:80 check inter 10s fall 3 rise 2  maxconn 30
        server  WAF_backendserver2 172.34.1.5:80 check inter 10s fall 3 rise 2  maxconn 30

